#+TITLE: Literate Emacs configuration
#+AUTHOR: Elvin

* This is my emacs configuration
Clone this repository in ~$HOME/.emacs.d~

*Make sure to execute ~M-x all-the-icons-install-fonts~ the first time you start Emacs !*

#+BEGIN_SRC emacs-lisp
  ;; This directory will contain external packages
  (add-to-list 'load-path "~/.emacs.d/ext")
#+END_SRC

* General configurations
** Navigation keybinds
I like to have my own keybindings for navigation, feel free to remove/edit them.

#+BEGIN_SRC emacs-lisp
  (global-set-key "\M-i" 'previous-line)
  (global-set-key "\M-k" 'next-line)
  (global-set-key "\M-j" 'backward-char)
  (global-set-key "\M-l" 'forward-char)
  (global-set-key "\M-u" 'backward-word)
  (global-set-key "\M-o" 'forward-word)
  (global-set-key "\M-y" 'move-beginning-of-line)
  (global-set-key "\M-p" 'move-end-of-line)
  (global-set-key "\M-[" 'beginning-of-defun)
  (global-set-key "\M-]" 'end-of-defun)
  (global-set-key "\M-," 'beginning-of-buffer)
  (global-set-key "\M-." 'end-of-buffer)

  (global-set-key "\M-n" 'kill-whole-line)
  (global-set-key "\M-d" 'duplicate-line)
  (global-set-key "\M-e" 'copy-from-above-command)
  (global-set-key (kbd "C-x x") 'kill-region)
  (global-set-key "\C-v" 'yank)
  (global-set-key "\C-w" 'undo)

  ;; Use avy for navigation to words
  (global-set-key (kbd "C-;") 'avy-goto-word-1)
#+END_SRC

** Backup files
I don't like emacs making backup files, so I completely remove them.

#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
#+END_SRC

** Visual/Audio things
#+BEGIN_SRC emacs-lisp
  ;; Remove startup message
  (setq inhibit-startup-message t)

  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  ;; Turn off sound
  (setq ring-bell-function 'ignore)

  ;; Display line numbers in every buffer
  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode 1)

  (global-visual-line-mode 1)

  ;; Do not show warnings
  (setq warning-minimum-level :error)
#+END_SRC

** Theme
#+BEGIN_SRC emacs-lisp
  (setq custom-safe-themes t)
  (load-theme 'spacemacs-dark)
#+END_SRC

** Dashboard
#+BEGIN_SRC emacs-lisp
  (dashboard-setup-startup-hook)
  (setq dashboard-banner-logo-title "Welcome to Emacs")
  (setq dashboard-startup-banner (concat user-emacs-directory "/images/banner1.png"))
  (setq dashboard-item-shortcuts '((recents   . "r")
                                   (bookmarks . "m")
                                   (projects  . "p")
                                   (agenda    . "a")))
  (setq dashboard-footer-messages
        '("Always, somewhere, someone is fighting for you. As long as you remember her, you are not alone."
          "If someone says it's wrong to hope, I will tell them that they're wrong every time. I could tell them that countless times!"
          "Protect the one thing you want to protect until the very end."
          "Make a contract with me, and become a magical girl!"))
  (setq dashboard-show-shortcuts nil)
  (setq dashboard-center-content t)
  (setq dashboard-vertically-center-content t)
  (setq dashboard-icon-type 'all-the-icons)
#+END_SRC

** File tree explorer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-t") 'neotree-toggle)
  (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
#+END_SRC

** Helm
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-x") #'helm-M-x)
  (global-set-key (kbd "C-x C-f") #'helm-find-files)
  (global-set-key (kbd "C-y") #'helm-show-kill-ring)
  (global-set-key (kbd "C-x b") #'helm-mini)
#+END_SRC

* For code/text editing
** Projectile
#+BEGIN_SRC emacs-lisp
  (projectile-mode 1)
  (define-key projectile-mode-map
              (kbd "C-c p") 'projectile-command-map)
#+END_SRC

** Smartparens / Rainbow delimiters
#+BEGIN_SRC emacs-lisp
  (smartparens-global-mode 1)
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+END_SRC

** LSP configuration
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook #'lsp)
  (setq lsp-completion-provider :capf)
  (setq lsp-ui-doc-enable t)
  (setq lsp-ui-doc-show-with-cursor t)
  (setq lsp-eldoc-enable-hover t)
  (setq eldoc-echo-area-use-multiline-p t)
  (add-hook 'lsp-mode-hook #'lsp-ui-mode)

  (global-company-mode t)
  (let ((map company-active-map))
    (define-key map (kbd "<tab>") 'company-complete-selection))
  (setq company-minimum-prefix-length 3)
  (setq company-idle-delay 0)
  (setq company-tooltip-align-annotations t)

  (yas-global-mode 1)
  (setq company-frontends '(company-pseudo-tooltip-frontend
                            company-preview-frontend
                            company-echo-metadata-frontend))
  (add-to-list 'company-backends #'company-yasnippet)
  (setq company-backends '((company-capf company-yasnippet company-files)))
#+END_SRC

* Org mode
I feel like I need a whole section for Org mode.

** Org sticky headers
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook #'org-sticky-header-mode)
  (setq org-startup-indented 1)
  (setq org-sticky-header-full-path 'full)
#+END_SRC

** Org bullets (visual)
#+BEGIN_SRC emacs-lisp
  (require 'org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC

** TODO Add more stuff in the future
